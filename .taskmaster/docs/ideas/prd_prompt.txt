I run an NFL Survivor / Knockout pool. An NFL Survivor Pool, also known as a knockout or elimination pool, is a type of football contest where players select one NFL team each week they believe will win its game. Players (users) can own multiples entries. Each entry lives on its own throughout the season. Every week, each user "picks" a team in one of the NFL games for that week on each of their entries. If the chosen (picked) team wins, the entry advances to the next week; if the team loses or ties, the entry is eliminated from the pool. The core rule that adds a strategic layer to these pools is that entries can only pick each NFL team once during the entire season.  The objective is to be the last entry remaining, having successfully picked a winning team each week without being eliminated.

Every year, I set up entry for players manually. Each player emails or texts me their desire to join the pool along with how many entries they would like to purchase. I record all of this information manually in a spreadsheet, collect entry money via cash or Venmo, and create entries for each player in a spreadsheet. E.g., Michael Coffey 1, Michael Coffey 2, etc. Last year I had over 450 entries. Every week during the NFL season, every player (user) sends me picks for each entry via email or text and I manually enter and record each pick to a Google Sheet which is available for every player to view during games on Sunday. I also have a Google Cloud function which updates scores and winners every minute during games on Sunday. This spreadsheet also conditionally changes colors on pick cells within the sheet to green for winners, and red for losers.

I'd like to remove much of the manual effort of this and create a site allowing players to log in and manage entries, submit picks, and view all submitted picks, winners, and losers when games start on Sundays. It is imperative that all submitted picks are not viewable by other players until 12PM ET on Sundays. However, a player can view and edit their own picks up until that deadline every week.

- I would prefer the default codebase be (especially for the backend) Python, unless another language is preferred for this type of work.
- For the datastore, we will leverage a Supabase database.
- I would prefer you handle most site styling in a CSS sheet instead of inline for the frontend